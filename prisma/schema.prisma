datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  USER
  ADMIN

  @@map("roles")
}

model User {
  id                String                 @id @default(cuid())
  name              String
  email             String                 @unique
  emailVerified     DateTime?
  image             String?
  role              UserRole               @default(USER)
  accounts          Account[]
  courses           UserInCourse[]
  assignmentUploads AssignmentFileUpload[]

  @@map("users")
}

model Course {
  id           String         @id @default(cuid())
  name         String
  year         Int
  semester     Int
  academicYear String
  users        UserInCourse[]
  assignments  Assignment[]
}

enum CourseUserRole {
  PROFESSOR
  STUDENT
}

model UserInCourse {
  userId   String
  courseId String
  userRole CourseUserRole

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
  @@map("users_in_courses")
}

model Assignment {
  id          String                 @id @default(cuid())
  courseId    String
  title       String
  description String                 @db.MediumText
  dateAdded   DateTime               @default(now())
  deadline    DateTime
  fileUploads AssignmentFileUpload[]

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("assignments")
}

model AssignmentFileUpload {
  assignmentId String
  studentId    String
  fileName     String

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([assignmentId, studentId])
  @@map("assignment_file_uploads")
}
